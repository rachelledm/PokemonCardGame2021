import random as rand

#makes and prints a healthbar 
def makeHealthBar(pokeHealth):
  i = 0
  hBar = []
  while i < pokeHealth:
    hBar.append("O")
    i += 1
  print("HP | ", end = "")
  if len(hBar) <= 3:
    print("\u001b[31m", end = "")
    print(*hBar, sep=" ")
    print("\u001b[0m", end = "")
  else:
    print(*hBar, sep=" ")
  return hBar

#prints off the round start screen
def roundStart(plPokeName, plHealth, cpuPokeName, cpuHealth):
  print("\u001b[1m{}\u001b[0m".format(cpuPoke[0]))
  #this will also print the health bar
  cpuHBar = makeHealthBar(cpuHealth)
  #TBA acsii of pokemon?
  print("\n\n\n\n\n\n")
  print("\u001b[1m{}\u001b[0m".format(plPoke[0]))
  plHBar = makeHealthBar(plHealth)
  


#choses an attack
def chooseAttack(pokeName, m1Name, m1Dam, m2Name, m2Dam, random):
  #this means its a CPU's turn
  if random == True:
    choice = rand.randint(1,2)
  else:
    print("1. Use {} for {} damage\n2. Use {} for {} damage".format(m1Name, m1Dam, m2Name, m2Dam))
    choice = enterNumber("Which move do you chose? ", 2)
  #implementing choice
  if choice == 1:
    print("{} used {}!".format(pokeName, m1Name))
    return m1Dam
  elif choice ==2:
    print("{} used {}!".format(pokeName, m2Name))
    return m2Dam

#depending on type can add/remove dmg points
def typeEffect(attType, defType):
  #d stands for damage boost
  d = 0
  if attType == "Water":
    if defType == "Fire":
      #the return is the buf/debuff
      d = 1
    elif defType == "Grass":
      d = -1
  elif attType == "Fire":
    if defType == "Grass":
      d = 1
    elif defType == "Water":
      d = -1
  elif attType == "Grass":
    if defType == "Water":
      d = 1
    elif defType == "Fire":
      d = -1
  #This reduces the amount of print statements needed
  if d == 1:
    print("\u001b[33mSupereffective type matchup!\u001b[0m")
    return d
  elif d == -1:
    print("\u001b[35mIneffective type matchup...\u001b[0m")
    return d
  else: 
    #if none of these conditions then there is no special effect so 0 is returned
    return 0

def removeHP(pokeName, pokeHealth, attack, attackType, defType):
  typeBuff = typeEffect(attackType, defType)
  newHP = pokeHealth - attack - typeBuff
  if newHP < 0:
    print("{} has ran out of HP\n".format(pokeName))
  else:
    print("{} has {} HP left\n".format(pokeName, newHP))
  return newHP

def pokeFaint(poke):
  print("{} has fainted!".format(poke))
  
def gameOver(winner):
  print("The {} has won!".format(winner))



def enterNumber(text, range):
  while True:
    numEntered = input("{}\u001b[32m".format(text))
    print("\u001b[38m\u001b[0m", end = "\n")
    try:
      numEntered = int(numEntered)
      if 0 < numEntered <= range:
        #changes back to int as menu deals with choices only
        return int(numEntered)
      else:
        print("That number is out of range, try again.\n")
    except ValueError:
        print("That isn't a valid option, try again\n")

#Runs one round of poke game
'''
need to import os for this test code to function

#setting up random pokemon for testing
plPoke = ["Blastoise", "Water", "Water Spout", 3, "Steam Blast", 2]
cpuPoke = ["Charizard", "Fire", "Flamethrower", 3, "Scratch", 3]
plHealth = 10
cpuHealth = 10

roundStart(plPoke[0],plHealth, cpuPoke[0], cpuHealth)
dmg = chooseAttack(plPoke[0], plPoke[2], plPoke[3], plPoke[4], plPoke[5], False)
cpuHealth = removeHP(cpuPoke[0], cpuHealth, dmg, plPoke[1], cpuPoke[1])
dmg = chooseAttack(cpuPoke[0], cpuPoke[2], cpuPoke[3], cpuPoke[4], cpuPoke[5], True)
plHealth = removeHP(plPoke[0], plHealth, dmg, cpuPoke[1], plPoke[1])
input("enter any key to continue...")
os.system("clear")
roundStart(plPoke[0], plHealth, cpuPoke[0], cpuHealth)
'''
